// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  username        String?       @unique
  bio             String?
  email           String?       @unique
  emailVerified   DateTime?
  image           String?
  coverImage      String?
  userCoverImage  CoverImage?
  userImage       String?
  profileImage    ProfileImage?
  password        String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  hasNotification Int           @default(0)

  posts         Post[]
  comments      Comment[]
  notifications Notification[]
  Likes         Likes?
  Account       Account[]
  Followers     Followers[]
  Following     Following[]
}

model Followers {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  name       String?
  username   String? @unique
  userImage  String?
  followerId String? @unique
  userId     String  @db.ObjectId
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Following {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  username    String? @unique
  userImage   String?
  followingId String? @unique
  userId      String  @db.ObjectId
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model ProfileImage {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  public_id String @unique
  url       String @default("")
  userId    String @unique @db.ObjectId // relation scalar field (used in the `@relation` attribute above)
  User      User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CoverImage {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  public_id String @unique
  url       String @default("")
  userId    String @unique @db.ObjectId // relation scalar field (used in the `@relation` attribute above)
  User      User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  body       String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  userId     String      @db.ObjectId
  likes      Likes[]
  postImages PostImage[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  comments Comment[]
}

model PostImage {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  postId    String @db.ObjectId
  public_id String @default("")
  url       String @default("")
  owner     String
  Post      Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Likes {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  postId String @db.ObjectId
  userId String @unique @db.ObjectId
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Notification {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  body             String
  notifierName     String
  notifierusername String
  notifierImage    String
  userId           String   @db.ObjectId
  createdAt        DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
